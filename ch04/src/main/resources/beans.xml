<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

        <!-- init-method指定bean的初始化方法， destroy-method指定bean的销毁方法
             singleton在任何地方都用就使用，prototype考虑安全线程延迟使用 容器的管理方式不一样
              singleton默认先创建好，prototype使用的时候才创建好 -->
        <!--<bean id="people" class="edu.nf.ch04.People" init-method="init" destroy-method="destroy"/>-->

        <!-- 初始化的方法有两种
             bean的初始化方法：1、实现InitializingBean接口，接口包含一个afterPropertiesSet方法
                             2、在Bean中自定义初始化方法，并在配置文件通过initial-method属性来指定
             两个方法都使用就先执行接口的方法，在实现自定义的方法
             注意：如果InitializingBean接口和initial-method一起使用，
             那么先执行InitializingBean接口的方法，在执行自定义的initial-method方法

             bean的销毁方法
             两种方式：
             1、实现DisposableBean接口，此接口包含一个destriy方法
             2、在Bean中自定义销毁方法，并在配置文件中通过destroy-method指定
             注意：：如果两种同时使用，DisposableBean接口先执行，在执行自定义接口的销毁方法

             生命周期的执行顺序：
             1.构造方法
             2.InitializingBean的afterPropertiesSet
             3.init-method
             4.DisposableBean的destroy方法
             5.destroy-method
         -->
        <bean id="user" class="edu.nf.ch04.Users" init-method="init" destroy-method="myDestroy" />

        <!-- 配置BeanPostProcessor（简称：BPP）
             id不用配置因为就一个 -->
        <bean class="edu.nf.ch04.processor.MyPostProcessor" />
        <!-- 当配置了Bean的后处理器，生命周期的方法如下：
              1.创建构造方法
              2.后处理器的postProcessBeforeInitialization
              3.InitializingBean的afterPropertiesSet
              4.自定义init-method
              5.后处理器的postProcessAfterInitialization
              6.DisposableBean的destroy
              7.自定义destroy-method
         -->
</beans>