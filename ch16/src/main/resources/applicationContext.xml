<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

        <!-- 装配业务层对象 -->
        <bean id="userService" class="edu.nf.ch16.service.impl.UserServiceImpl"/>
        <!-- 配置切面类 -->
        <bean id="userServiceAspect" class="edu.nf.ch16.aspect.UserServiceAspect"/>
        <!-- 配置AOP -->
        <aop:config>
            <!-- 定义切入点 -->
            <aop:pointcut id="myPointcut" expression="execution(* edu.nf.ch16.service.impl.*.*(..))"/>
            <!-- 配置切面,ref引用上面配置切面id -->
            <aop:aspect ref="userServiceAspect">
                <!-- 配置各种通知,method指定切面类中对应方法名
                     pointcut-ref引用切入点的id
                     通常pointcut-re引用的都是同一个切入点表达式，但某个通知想要自定义切点表达式的时候，
                     可以通过pointcut属性重新自定切点表达式
                     pointcut 重新自定切入点表达式
                     <aop:before method="before" pointcut-ref="myPointcut" pointcut="execution(* edu.nf.ch16.service.impl.UserServiceImpl.add(..))"/>
                 -->
                <aop:before method="before" pointcut-ref="myPointcut"/>
                <aop:around method="around" pointcut-ref="myPointcut"/>
                <!-- 后置通知的returning对应的是afterReturning的返回值参数名（名称要一致） -->
                <aop:after-returning method="afterReturning" pointcut-ref="myPointcut" returning="returnVal"/>
                <!-- 异常通知中的throwing对应afterThrowing方法的异常参数名（名称要一致） -->
                <aop:after-throwing method="afterThrowing" pointcut-ref="myPointcut" throwing="e"/>
                <aop:after method="after" pointcut-ref="myPointcut"/>
            </aop:aspect>
        </aop:config>
</beans>